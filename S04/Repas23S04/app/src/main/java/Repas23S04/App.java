/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Repas23S04;

import Utils.ConnexioDBMySQL;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

public class App {

    public static String ruta = "/Users/joange/Documents/2022_23_Repas/S04/resources";

    public static void main(String[] args) {
        App app = new App();

        ConnexioDBMySQL conexio = new ConnexioDBMySQL();

        Connection laConexion = conexio.getConnexio();

        ArrayList<Departamento> losDepartamentos = app.loadCSVDepartamento(ruta + "/Departamentos/Departamentos.csv", true);

        // app.insertDepartamentos(laConexion, losDepartamentos);
        //System.out.println("El departament més alt és: " + app.getMaxDepID(laConexion));
        // app.inserirNouDept(laConexion);
        // HashSet<Empleado> losEmpleados = app.loadJSON(ruta + "/Empleados/Empleados.json");
        //app.insertEmpleados(laConexion, losEmpleados);
       // app.updateSalarioEmpleados2(laConexion);
       
      // app.deleteManguis(laConexion);

    }

    public ArrayList<Departamento> loadCSVDepartamento(String filename, boolean header) {

        File f = new File(filename);

        if (!f.exists()) {
            System.out.println("File " + filename + " does not exists. Exiting");
            return null;
        }

        if (!f.isFile()) {
            System.out.println("File " + filename + " it is not a file. Exiting");
            return null;

        }

        ArrayList<Departamento> losDepartamentos = new ArrayList<>();

        try {
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String linea = "";

            while ((linea = bfr.readLine()) != null) {

                // is header, we ommit
                if (header) {
                    header = false;
                    continue;
                }

                String info[] = linea.split(",");
                Departamento d = new Departamento(
                        Integer.parseInt(info[0]),
                        info[1],
                        info[2]);

                losDepartamentos.add(d);
            }
            bfr.close();
            fr.close();

        } catch (FileNotFoundException ex) {
            System.out.println(ex.getMessage());
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        return losDepartamentos;
    }

    public HashSet<Empleado> loadJSON(String filename) {

        HashSet<Empleado> losEmpleados = new HashSet<>();
        JSONObject empleadosJSON = LligJSON(filename);

        JSONArray empleados = empleadosJSON.getJSONArray("Empleados");

        for (int i = 0; i < empleados.length(); i++) {
            Empleado e = new Empleado(empleados.getJSONObject(i));
            losEmpleados.add(e);
        }

        return losEmpleados;

    }

    private JSONObject LligJSON(String filename) {
        try {
            // Amb FileReader llegirem caràcter a 
            // caràcter el fitxer i l'afegim al string myJson
            FileReader file = new FileReader(filename);
            String myJson = "";

            int i;
            while ((i = file.read()) != -1) {
                myJson = myJson + ((char) i);
            }

            //System.out.println(myJson);
            file.close();

            // I fem ús del constructor de JSONObject
            // al que li passem un string amb el JSON:
            return (new JSONObject(myJson));

        } catch (Exception e) {
            System.out.println("Error llegint el fitxer");
            return null;
        }

    }

    public void insertDepartamentos(Connection con, ArrayList<Departamento> losDepartamentos) {

        String SQL = "insert into DEPART values (?,?,?) ";

        for (Departamento departamento : losDepartamentos) {
            try {

                PreparedStatement pst = con.prepareStatement(SQL);

                pst.setInt(1, departamento.getDEPT_NO());
                pst.setString(2, departamento.getDNOMBRE());
                pst.setString(3, departamento.getLOC());

                pst.executeUpdate();

            } catch (SQLException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    public int getMaxDepID(Connection con) {
        int max = 0;
        String Sql = "select max(DEPT_NO) from DEPART";
        try {
            Statement st = con.createStatement();
            ResultSet rst = st.executeQuery(Sql);

            if (rst.next()) // hi ha almenys un resultat
            {
                max = rst.getInt(1);
            } else {
                System.out.println("Error, no hi han resultats");
            }

            rst.close();

        } catch (SQLException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }

        return max;

    }

    public void inserirNouDept(Connection con) {
        String SQL = "insert into DEPART values (?,?,?) ";

        String nom = Utils.Utilitats.leerTextoC("Dis-me el nom del departament: ");
        String loc = Utils.Utilitats.leerTextoC("Dis-me la localitat del departament: ");

        try {
            PreparedStatement pst = con.prepareStatement(SQL);

            pst.setInt(1, getMaxDepID(con) + 10);
            pst.setString(2, nom);
            pst.setString(3, loc);

            int num_rows = pst.executeUpdate();

            if (num_rows == 1) {
                System.out.println("Departament inserit satisfactoriament.");
            } else {
                System.out.println("Error inserint departament");
            }

        } catch (SQLException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void insertEmpleados(Connection con, HashSet<Empleado> losEmpleados) {
        try {
            // Disable foreign keys check
            Statement stmt = con.createStatement();
            stmt.execute("SET FOREIGN_KEY_CHECKS=0");
            stmt.close();

            String SQL = "insert into EMPLE values (?,?,?,?,?,?,?,?) ";

            for (Empleado empleado : losEmpleados) {

                PreparedStatement pst = con.prepareStatement(SQL);

                pst.setInt(1, empleado.getEMP_NO());
                pst.setString(2, empleado.getAPELLIDO());
                pst.setString(3, empleado.getOFICIO());
                pst.setInt(4, empleado.getDIR());
                pst.setDate(5, new java.sql.Date(empleado.getFECHA_ALT().getTime()));
                pst.setDouble(6, empleado.getSALARIO());
                pst.setDouble(7, empleado.getCOMISION());
                pst.setInt(8, empleado.getDEPT_NO());

                pst.executeUpdate();

            }

            stmt = con.createStatement();
            stmt.execute("SET FOREIGN_KEY_CHECKS=1");
            stmt.close();

        } catch (SQLException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void updateSalarioEmpleados(Connection con) {

        String SQL = "update EMPLE set salario=salario*1.05 where DEPT_NO=?";

        int dep = Utils.Utilitats.leerEnteroC("Dis-me el departament a actualitzar: ");

        try {
            PreparedStatement pst = con.prepareStatement(SQL);

            pst.setInt(1, dep);

            int empleats_modificats = pst.executeUpdate();

            System.out.println("S'ha actuaitzat el salari de " + empleats_modificats + " empleats");

        } catch (SQLException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void updateSalarioEmpleados2(Connection con) {

        String SQL = "update EMPLE set salario=salario*1.05 where DEPT_NO=";

        int dep = Utils.Utilitats.leerEnteroC("Dis-me el departament a actualitzar: ");

        SQL = SQL + dep;

        try {
            Statement st = con.createStatement();

            int empleats_modificats = st.executeUpdate(SQL);

            System.out.println("S'ha actuaitzat el salari de " + empleats_modificats + " empleats");

        } catch (SQLException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void deleteManguis(Connection con) {
        String SQL = "delete from EMPLE \n" +
            "where DIR in (select emp_no from EMPLE\n" +
            "where apellido like '%EZ%' and oficio like '%LIS%')";

        try {
            Statement st = con.createStatement();

            int empleats_modificats = st.executeUpdate(SQL);

            System.out.println("S'ha esborrat " + empleats_modificats + " empleats");

        } catch (SQLException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
}
