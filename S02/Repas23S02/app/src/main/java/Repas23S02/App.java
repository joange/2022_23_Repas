/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Repas23S02;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;

import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.TransformerFactory;

import org.json.JSONArray;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;



public class App {

    public static String ruta = "/Users/joange/Documents/2022_23_Repas/S02";

    public HashSet<Empleado> loadJSON(String filename) {

        HashSet<Empleado> losEmpleados = new HashSet<>();
        JSONObject empleadosJSON = LligJSON(filename);

        JSONArray empleados = empleadosJSON.getJSONArray("Empleados");

        for (int i = 0; i < empleados.length(); i++) {
            Empleado e = new Empleado(empleados.getJSONObject(i));
            losEmpleados.add(e);
        }

        return losEmpleados;

    }

    public void checkEmpleados(HashSet<Empleado> losEmpleados) {

        ArrayList<Integer> departamentos = new ArrayList<>(Arrays.asList(10, 20, 30, 40, 50));

        System.out.println("Empleados with wrong department");
        for (Empleado empleado : losEmpleados) {
            if (!departamentos.contains(empleado.getDEPT_NO())) {
                System.out.println("\tEmployee " + empleado + " has wrong department");
            }
        }
        
        System.out.println("Employees that are bosses");
        for (Empleado jefe : losEmpleados) {
            int q = 0;
            for (Empleado subordinado : losEmpleados) {
                if (subordinado.getDIR() == jefe.getEMP_NO()) {
                    q++;
                }
            }
            if (q > 0) {
                System.out.println("Empleado " + jefe + " has " + q + " workers.");
            }
        }
    }

    public void createXML(HashSet<Empleado> losEmpleados, String fileName) {

        try {

            Document doc = DocumentBuilderFactory.newInstance().newDocumentBuilder().newDocument();

            Element root = doc.createElement("Empleados");
            doc.appendChild(root);

            for (Empleado empleado : losEmpleados) {
                Element e = empleado.asXML(doc);
                root.appendChild(e);
            }

            System.out.println(root.getElementsByTagName("Empleado").getLength() + " empleados");

            Transformer trans = TransformerFactory.newInstance().newTransformer();
            DOMSource source = new DOMSource(doc);
            StreamResult result = new StreamResult(new FileOutputStream(fileName));

            trans.transform(source, result);

        } catch (Exception ex) {
            System.out.println(ex.getMessage());
        }

    }

    public static void main(String[] args) {
        App app = new App();

        System.out.println("==== Loading JSON FILE ====");
        HashSet<Empleado> losEmpleados = app.loadJSON(ruta + "/Empleados/Empleados.json");
        for (Empleado e : losEmpleados) {
            System.out.println(e);
        }

        System.out.println("====  CHECKING EMPLEADOS  ====");
        app.checkEmpleados(losEmpleados);

        System.out.println("====  GENERATING XML FILE OF EMPLEADOS =====");
        app.createXML(losEmpleados, ruta + "/Empleados/newEmpleados.xml");

        System.out.println("====== CREATING JSON DATA OF DEPARTMENTS  =====");
        ArrayList<Departamento> losDepartamentos = app.loadCSVDepartamento(ruta + "/Departamentos/Departamentos.csv", true);

        app.generateJSON(losDepartamentos, losEmpleados, ruta + "/Empresa.json"); 

    }

    private void generateJSON(ArrayList<Departamento> losDepartamentos, HashSet<Empleado> losEmpleados, String fileName) {

        JSONObject empresa = new JSONObject();
        JSONArray departamentos = new JSONArray();

        for (Departamento dep : losDepartamentos) {
            JSONObject departamento = new JSONObject();
            departamento.put("DEPT_NO", dep.getDEPT_NO());
            departamento.put("DNOMBRE", dep.getDNOMBRE());
            departamento.put("LOC", dep.getLOC());

            JSONArray empleados = new JSONArray();
            double total=0.0;
            for (Empleado empleado : losEmpleados) {
                if(empleado.getDEPT_NO()==dep.getDEPT_NO()){
                    JSONObject emple = empleado.asJSON();
                    total+=empleado.getSALARIO();
                    empleados.put(emple);
                }
            }

            departamento.put("TOTAL", total);
            departamento.put("EMPLEADOS", empleados);
            departamentos.put(departamento);

        }
        empresa.put("Empresa", departamentos);
        System.out.println(empresa.toString(2));
        escriuJSON(fileName, empresa);

    }

    private JSONObject LligJSON(String filename) {
        try {
            // Amb FileReader llegirem caràcter a 
            // caràcter el fitxer i l'afegim al string myJson
            FileReader file = new FileReader(filename);
            String myJson = "";

            int i;
            while ((i = file.read()) != -1) {
                myJson = myJson + ((char) i);
            }

            //System.out.println(myJson);
            file.close();

            // I fem ús del constructor de JSONObject
            // al que li passem un string amb el JSON:
            return (new JSONObject(myJson));

        } catch (Exception e) {
            System.out.println("Error llegint el fitxer");
            return null;
        }

    }

    private void escriuJSON(String filename, JSONObject jso) {

        try {
            FileWriter file = new FileWriter(filename);
            file.write(jso.toString(4)); // 4 són els espais d'indentació
            file.close();

        } catch (IOException e) {
            System.out.println("Error, no es pot crear el fitxer " + filename);
        }
    }

    public ArrayList<Departamento> loadCSVDepartamento(String filename, boolean header) {

        File f = new File(filename);

        if (!f.exists()) {
            System.out.println("File " + filename + " does not exists. Exiting");
            return null;
        }

        if (!f.isFile()) {
            System.out.println("File " + filename + " it is not a file. Exiting");
            return null;

        }

        ArrayList<Departamento> losDepartamentos = new ArrayList<>();

        try {
            FileReader fr = new FileReader(f);
            BufferedReader bfr = new BufferedReader(fr);
            String linea = "";

            while ((linea = bfr.readLine()) != null) {

                // is header, we ommit
                if (header) {
                    header = false;
                    continue;
                }

                String info[] = linea.split(",");
                Departamento d = new Departamento(
                        Integer.parseInt(info[0]),
                        info[1],
                        info[2]);

                losDepartamentos.add(d);
            }
            bfr.close();
            fr.close();

        } catch (FileNotFoundException ex) {
            System.out.println(ex.getMessage());
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        }
        return losDepartamentos;
    }
}
